/* eslint-disable */

const { mkdir, readFile, writeFile } = require("fs/promises");
const { exit, chdir } = require("process");
const { layerLibraries } = require("./dist/index");

const generate = async () => {
  chdir(__dirname);
  await mkdir("./layers", { recursive: true });
  const rootPackageJsonStr = await readFile("./package.json", {
    encoding: "utf8"
  });

  const rootPackageJson = JSON.parse(rootPackageJsonStr);

  for (const layer in layerLibraries) {
    const dependencies = {};
    layerLibraries[layer].forEach(dependency => {
      const dependencyVersion = rootPackageJson.peerDependencies[dependency];
      if (!dependencyVersion) {
        throw new Error(
          `Dependency ${dependency} in layer ${layer} is not found in root package.json's peerDependencies`
        );
      }
      dependencies[dependency] = dependencyVersion;
    });
    const packageJSON = {
      name: `slplayer-${layer.toLowerCase()}`,
      version: "1.0.0",
      description: "Function layer generated by @somod/common-layers",
      dependencies: dependencies
    };
    await mkdir(`./layers/${layer}/nodejs`, { recursive: true });
    await writeFile(
      `./layers/${layer}/nodejs/package.json`,
      JSON.stringify(packageJSON, null, 2)
    );
  }
};

generate().then(
  () => {},
  e => {
    console.error(e);
    exit(1);
  }
);
